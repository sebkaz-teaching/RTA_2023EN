[
  {
    "objectID": "books.html",
    "href": "books.html",
    "title": "Books and WWW pages",
    "section": "",
    "text": "G. Maas, F. Garillot Stream Processing with Apache Spark Zobacz opis lub Kup e-book\nF. Hueske, V. Kalavri Stream Processing with Apache Flink Zobacz opis lub Kup e-book\n\n\n\nA. Bellemare Mikrousługi oparte na zdarzeniach. Wykorzystanie danych w organizacji na dużą skalę Zobacz opis lub Kup\n\n\n\n\n\n\nW. McKinney Python w analizie danych. Przetwarzanie danych za pomocą pakietów Pandas i NumPy oraz środowiska IPython. Wydanie II Zobacz opis lub Kup książkę, Kup e-book\nD. McIlwraith, H. Marmanis, D. Babenko Inteligentna sieć. Algorytmy przyszłości. Wydanie II (ebook) Zobacz opis lub Kup książkę, Kup e-book\nJoel Grus Data science od podstaw. Analiza danych w Pythonie. Wydanie II. Zobacz opis lub Kup książkę, Kup e-book.\nJohn W. Foreman Mistrz analizy danych. Od danych do wiedzy. Zobacz opis lub Kup książkę, Kup e-book.\nA. Geron Uczenie maszynowe z użyciem Scikit-Learn i TensorFlow. Wydanie II. Zobacz opis lub Kup książkę, Kup e-book.\nAlberto Boschetti, Luca Massaron Python. Podstawy nauki o danych. Zobacz opis lub Kup książkę.\nSebastian Raschka Python. Uczenie maszynowe. Wydanie II. Zobacz opis lub Kup książkę.\nR. Schutt, C. O’Neil Badanie danych. Raport z pierwszej lini działań. Zobacz opis lub Kup książkę.\nT. Segaran Nowe usługi 2.0. Przewodnik po analizie zbiorów danych Zobacz opis lub Kup książkę, Kup e-book\nT. Morzy Eksploracja Danych. Metody i algorytmy, PWN, 2013.\nKrzyśko, Wołyński, Górecki, Skorzybut, Systemy uczące się . WNT, 2008\n\n\n\n\n\nF. Chollet Deep Learning. Praca z językiem Python i biblioteką Keras. Zobacz opis lub Kup książkę, Kup e-book\nJ. Patterson, A. Gibson Deep Learning. Praktyczne wprowadzenie (ebook) Zobacz opis lub Kup e-book\nV. Zocca, G. Spacagna, D. Slater, P. Roelants. Deep Learning. Uczenie głębokie z językiem Python. Sztuczna inteligencja i sieci neuronowe Zobacz opis lub Kup ebook\nD. Osinga Deep Learning. Receptury Zobacz opis lub Kup książkę, Kup e-book\nS. Weidman Uczenie głębokie od zera. Podstawy implementacji w Pythonie Zobacz opis lub Kup książkę, Kup e-book\nD. Foster Deep learning i modelowanie generatywne. Jak nauczyć komputer malowania, pisania, komponowania i grania Zobacz opis lub Kup książkę, Kup e-book\nJ. Howard, S. Gugger Deep learning dla programistów. Budowanie aplikacji AI za pomocą fastai i PyTorch Zobacz opis lub Kup książkę, Kup e-book\n\n\n\n\n\nSpark. Zaawansowana analiza danych (ebook) Zobacz opis lub Kup e-book\nB. Chambers, M. Zaharia Spark: The Definitive Guide. Big Data Processing Made Simple (ebook) Zobacz opis lub Kup e-book\nJ. Quddus Machine Learning with Apache Spark Quick Start Guide (ebook) Zobacz opis lub Kup e-book\n\n\n\n\n\nG. Coldwind Zrozumieć programowanie Zobacz opis lub Kup książkę, Kup e-book\nA. Allain C++. Przewodnik dla początkujących Zobacz opis lub Kup książkę, Kup e-book\nS. Dasgupta, C. Papadimitriou, U. Vazirani Algorytmy PWN.\n\n\n\n\n\nJ. Krochmalski Docker. Projektowanie i wdrażanie aplikacji Zobacz opis lub Kup książkę, Kup e-book\nR. McKendrick, S. Gallagher Docker. Programowanie aplikacji dla zaawansowanych. Wydanie II Zobacz opis lub Kup książkę, Kup e-book\n\n\n\n\n\nP. Bell, B. Beer GitHub. Przyjazny przewodnik (ebook) Zobacz opis lub Kup e-book\n\n\n\n\n\nC. Althoff, Programista Samouk. Profesjonalny przewodnik do samodzielnej nauki kodowania. Zobacz opis lub Kup teraz, Kup e-book\nA. Sweigart, Automatyzacja nudnych zadań z pythonem. Zobacz opis lub Kup książkę, Kup e-book\nK. Reitz, T. Schlusser Przewodnik po Pythonie. Dobre praktyki i praktyczne narzędzia. Zobacz opis lub Kup teraz, Kup e-book\n\n\n\n\n\nB.Tate, L. Carslon, C. Hiibs, Ruby on Rails. Wprowadzenie. Wydanie II Zobacz opis lub Kup e-book\nB. Frain, Responsive Web Design. Projektowanie elastycznych witryn w HTML5 i CSS3, Zobacz opis lub Kup e-book\nK. Beck, TDD. Sztuda tworzenia, Zobacz opis lub Kup teraz, Kup e-book\nB. Dayley, Node.js, MongoDB, AngularJS. Kompendium wiedzy, Zobacz opis lub Kup teraz, Kup e-book\n\n\n\n\n\nA. Jacquier, O. Kondratyev, Quantum Machine Learning and Optimisation in Finance. On the Road to Quantum Advantage."
  },
  {
    "objectID": "books.html#www-pages",
    "href": "books.html#www-pages",
    "title": "Books and WWW pages",
    "section": "WWW Pages",
    "text": "WWW Pages\n\nSoftware\n\nGithub\nGit-instrukcja\nwww.python.org\nPyPI python libraries\nAnaconda\nDocker\n\n\n\nPython libraries for data analysis\n\nNumPy\nSciPy\nPandas\nScikit-learn\nJupyter\nMatplotlib\nBeautiful Soup\nTheano\nKeras\nTensorFlow\nVirtual ENV\n\n\n\nText editors\n\nNotepad++\nSublime Text\nVisual Studio Code\n\n\n\nMarkdown\n\nMD\n\n\n\nJupyter notebook\n\nGaleria ciekawych notatników\nIntro\nKernels\nBringing the best out of jupyter for data science\nJupyter extensions\nI don’t like notebooks\nJupyter lab\nSpeed up jupyter notebook\n\n\n\nETL\n\ndata cookbook\n\n\n\nDatasets\n\nInternet Archive\nReddit\nKDnuggets\nKaggle\nList of datasets for machine learning research\nUCI Machine Learning Repo\nPublic API\nGoogle Datatset Search\n\n\n\nPython\n\nChris Albon Technical Notes on Using Data Science & AI\n40+ Python Statistics For Data Science Resources\nPractical Business Python\n\n\n\nML course\n\nKurs Machine Learning - Andrew Ng, Stanford"
  },
  {
    "objectID": "sylabus.html",
    "href": "sylabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Real Time Analytics\nSGH Warsaw School of Economics\nECTS: 3\nLanguage: EN\nlevel: medium\nday of week: Monday/Tuesday\nTeacher: Sebastian Zając, sebastian.zajac@sgh.waw.pl\nWebsite: http://sebkaz-teaching.github.io/EN"
  },
  {
    "objectID": "sylabus.html#description",
    "href": "sylabus.html#description",
    "title": "Syllabus",
    "section": "Description",
    "text": "Description\nMaking the right decisions based on data and their analysis in business is a process and daily. Modern methods of modeling by machine learning (ML), artificial intelligence (AI), or deep learning not only allow better understanding of business, but also support making key decisions for it. The development of technology and increasingly new business concepts of working directly with the client require not only correct but also fast decisions. The classes offered are designed to provide students with experience and comprehensive theoretical knowledge in the field of real-time data processing and analysis, and to present the latest technologies (free and commercial) for the processing of structured data (originating e.g. from data warehouses) and unstructured (e.g. images, sound, video streaming) in on-line mode. The course will present the so called lambda and kappa structures for data processing into data lake along with a discussion of the problems and difficulties encountered in implementing real-time modeling for large amounts of data. Theoretical knowledge will be gained (apart from the lecture part) through the implementation of test cases in tools such as Apache Spark, Nifi, Microsoft Azure and SAS. During laboratory classes student will benefit from fully understand the latest information technologies related to real-time data processing."
  },
  {
    "objectID": "sylabus.html#list-of-topics",
    "href": "sylabus.html#list-of-topics",
    "title": "Syllabus",
    "section": "List of Topics",
    "text": "List of Topics\n\nModelling, learning and prediction in batch mode (offline learning) and incremental (online learning) modes. Problems of incremental machine learning.\nData processing models in Big Data. From flat files to Data Lake. Real-time data myth and facts\nNRT systems (near real-time systems), data acquisition, streaming and analytics.\nAlgorithms for estimating model parameters in incremental mode. Stochastic Gradient Descent.\nLambda and Kappa architecture. Designing IT architecture for real-time data processing.\nPreparation of the micro-service with the ML model for prediction use.\nStructured and unstructured data. Relational databases and NoSQL databases.\nAggregations and reporting in NoSQL databases (on the example of the MongoDB or Cassandra)\nBasic of object-oriented programming in Python in linear and logistic regression, neural network analysis using the sklearn, TensorFlow and Keras.\nIT architecture of Big Data processing. Preparation of a virtual env for Apache Spark."
  },
  {
    "objectID": "sylabus.html#conditions-for-passing",
    "href": "sylabus.html#conditions-for-passing",
    "title": "Syllabus",
    "section": "Conditions for passing",
    "text": "Conditions for passing\n\ntest 30%\npractical test 30% (IF)\ngroup project 40% (70%)"
  },
  {
    "objectID": "sylabus.html#books",
    "href": "sylabus.html#books",
    "title": "Syllabus",
    "section": "Books",
    "text": "Books\n\nS. Zajac, “Modelowanie dla biznesu, Analityka w czasie rzeczywistym - narzędzia informatyczne i biznesowe”. SGH (2022)\nFrątczak E., red. “Modelowanie dla biznesu, Regresja logistyczna, Regresja Poissona, Survival Data Mining, CRM, Credit Scoring”. SGH, Warszawa 2019.\nFrątczak E., red., “Zaawansowane metody analiz statystycznych”, Oficyna Wydawnicza SGH, Warszawa 2012.\nIndest A., Wild Knowledge. Outthik the Revolution. LID publishing.com 2017.\nReal Time Analytic. “The Key to Unlocking Customer Insights & Driving the Customer Experience”. Harvard Business Review Analytics Series, Harvard Business School Publishing, 2018.\nSvolba G., “Applying Data Science. Business Case Studies Using SAS”. SAS Institute Inc., Cary NC, USA, 2017.\nEllis B. “Real-Time Analytics Techniques to Analyze and Visualize Streaming data.” , Wiley, 2014\nFamiliar B., Barnes J. “Business in Real-Time Using Azure IoT and Cortana Intelligence Suite” Apress, 2017"
  },
  {
    "objectID": "info.html",
    "href": "info.html",
    "title": "All tools",
    "section": "",
    "text": "For our first a few laboratories we will use just python codes. Check what is Your Python3 environment.\nIn the terminal try first:\npython\n# and\npython3\nI have python3 (You shouldn’t use python 2.7 version) so i create a new and a clear python environment.\nThe easiest way how to run a JupyterLab with your new python env. For  You can choose what You want.\npython3 -m venv <name of Your env>\n\nsource <name of your env>/bin/activate\n# . env/bin/activate\npip install --no-cache --upgrade pip setuptools\n\npip install jupyterlab numpy pandas matplotlib scipy\n# or\npip install -r requirements.txt\n\njupyterlab\ngo to web browser: localhost:8888\nIf You want rerun jupyterlab (after computer reset) just go to Your folder and run:\nsource <name of your env>/bin/activate\njupyterlab"
  },
  {
    "objectID": "info.html#python-env-with-jupyterlab-docker-version",
    "href": "info.html#python-env-with-jupyterlab-docker-version",
    "title": "All tools",
    "section": "Python env with JupyterLAB Docker Version",
    "text": "Python env with JupyterLAB Docker Version\n\nCookiecutter project\nFrom GitHub repository You can find how to use a cookiecutter for any data science project or other kind of programs.\nTo run and build full dockerfile project: Create python env and install cookiecutter library.\npython3 -m venv venv\nsource venv/bin/activate\npip --no-cache install --upgrade pip setuptools\npip install cookiecutter\nand run:\ncookiecutter https://github.com/sebkaz/jupyterlab-project\nYou can run a cookiecutter project directly from GitHub repo.\nAnswer questions:\ncd jupyterlab\ndocker-compose up -d --build\nTo stop:\ndocker-compose down\n\n\nCookiecutter with config yaml file\n\nPython, Julia, R\nAll + Apache Spark\n\nClone repo and run:\npython3 -m cookiecutter https://github.com/sebkaz/jupyterlab-project --no-input --config-file=spark_template.yml --overwrite-if-exists"
  },
  {
    "objectID": "info.html#start-with-github",
    "href": "info.html#start-with-github",
    "title": "All tools",
    "section": "Start with GitHub",
    "text": "Start with GitHub\nText from web site\nWhen You working on a project, e.g. a master’s thesis, (alone or in a team) you often need to check what changes, when and by whom were introduced to the project. The “version control system” or GIT works great for this task.\nYou can download and install Git like a regular program on any computer. However, most often (small projects) you use websites with some kind of git system. One of the most recognized is GitHub (www.github.com) which allows you to use the git system without installing it on your computer.\nIn the free version of the GitHub website, you can store your files in public (everyone has access) repositories. We will only focus on the free version of GitHub:\ngit --version"
  },
  {
    "objectID": "info.html#github",
    "href": "info.html#github",
    "title": "All tools",
    "section": "GitHub",
    "text": "GitHub\nAt the highest level, there are individual accounts (eg. http://github.com/sebkaz or those set up by organizations. Individual users can create ** repositories ** public (public) or private (private).\nOne file should not exceed 100 MB.\nRepo (shortcut to repository) is created with Create a new repository. Each repo should have an individual name.\n\nBranches\nThe main (created by default) branch of the repository is named master.\n\n\nMost important commends\n\nclone of Your repository\n\ngit clone https://adres_repo.git\n\nIn github case, you can download the repository as a ‘zip’ file.\n\n\nRepository for local directory\n\n# new directory\nmkdir datamining\ncd datamining\n# init repo\ngit init\n# there sould be a .git new directory\n# add file\necho \"Info \" >> README.md\n\nlocal and web version connection\n\ngit remote add origin https://github.com/<twojGit>/nazwa.git\n\n3 steps\n\n# status check\ngit status\n# 1. add all changes\ngit add .\n# 2. commit all changes with message\ngit commit -m \" message \"\n# 3. and\ngit push origin master\nYou can watch Youtube course.\nAll the necessary programs will be delivered in the form of docker containers."
  },
  {
    "objectID": "info.html#start-with-docker",
    "href": "info.html#start-with-docker",
    "title": "All tools",
    "section": "Start with Docker",
    "text": "Start with Docker\nIn order to download the docer software to your system, go to the page.\nIf everything is installed correctly, follow these instructions:\n\nCheck the installed version\n\ndocker --version\n\nDownload and run the image Hello World and\n\ndocker run hello-world\n\nOverview of downloaded images:\n\ndocker image ls\n\ndocker images\n\nOverview of running containers:\n\ndocker ps \n\ndocker ps -all\n\nStopping a running container:\n\ndocker stop <CONTAINER ID>\n\nContainer removal\n\ndocker rm -f <CONTAINER ID>\nI also recommend short intro"
  },
  {
    "objectID": "info.html#docker-as-an-application-continuation-tool",
    "href": "info.html#docker-as-an-application-continuation-tool",
    "title": "All tools",
    "section": "Docker as an application continuation tool",
    "text": "Docker as an application continuation tool\nDocker with jupyter notebook"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Info",
    "section": "",
    "text": "Kod: 222891-D\nWinter semester 2022/2023, SGH Warsaw School of Economics\nBasics information about this course can be found in the syllabus.\nList of books! I recommend.\nIf You don’t know what Python is go here."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Info",
    "section": "Schedule",
    "text": "Schedule\n\nLectures\nThe lecture is carried out in hybrid mode. It is OPTIONAL and takes place in Aula I building G\n\n\n20-02-2023 (Monday) 08:00-9:30 - Lecture 1\n\n\nStructured and unstructured data, OLAP and OLTP data processing model.\n\n27-02-2023 (Monday) 08:00-9:30 - Lecture 2\n06-03-2023 (Monday) 08:00-9:30 - Lecture 3\n13-03-2023 (Monday) 08:00-9:30 - Lecture 4\n\nLectures end with a TEST: 10 questions - 20 minutes. The test is conducted via MS Teams.\n\n\nLabs\n\n21-03-2023 (tuesday) 08:00-11:30 - C4D 2 groups\n28-03-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n04-04-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n18-04-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n25-04-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n09-05-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n16-05-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n23-05-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n30-05-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n06-06-2023 (tuesday) 08:00-11:30 - C4D, 2 grupy\n\n\n\nPlace\nLectures 1-4: G-Aula I Labs 1-10: C-4D\n\n\nExam\nLectures will end with a test (last class). Positive evaluation of the test (above 13 points) entitles you to carry out the exercises.\nAfter the exercises, homework will be carried out via the MS teams’ platform. Passing all exercises and tasks entitles you to complete the project.\nThe project should be carried out in groups of no more than 5 people.\nProject requirements:\n\nThe project should present a BUSINESS PROBLEM that can be implemented using the information provided online. (This does not mean that you cannot use batch processing, e.g. to generate a model).\nData should be sent to Apache Kafka and further processed and analyzed from there.\nThe programming language is free - applies to each component of the project.\nBI tools can be used\nData sources can be a table, artificially generated data, IoT, etc."
  },
  {
    "objectID": "index.html#technology",
    "href": "index.html#technology",
    "title": "Info",
    "section": "Technology",
    "text": "Technology\nParticipating in the classes, you must know and at least use the following information technologies:\n\nGIT\nPython, Jupyter notebook, Jupyter lab, Colab\nDocker\nApache Spark, Apache Flink, Apache Kafka, Apache Beam\nDatabricks Community edition Web page."
  },
  {
    "objectID": "lecture1.html",
    "href": "lecture1.html",
    "title": "Lecture 1 Small data",
    "section": "",
    "text": "The stream processing technology is becoming more and more popular with big and small companies because it provides superior solutions for many established use cases such as data analytics, ETL, transactional apps, software architectures, and business opportunities. We try to describe why stateful stream processing is becoming so popular and assess its potential.\nBut first, we start by reviewing classical data app architectures and point out their limitations."
  },
  {
    "objectID": "lecture1.html#data.-from-data-file-to-data-lake",
    "href": "lecture1.html#data.-from-data-file-to-data-lake",
    "title": "Lecture 1 Small data",
    "section": "Data. From data file to data lake",
    "text": "Data. From data file to data lake\nThe development of information technology has resulted in access to unimaginable amounts of a new resources which are structured and unstructured data.\nData has contributed to the development of thousands of new tools for generating, collecting, storing and processing information on an unprecedented scale.\n\nThe emergence of new scientific or business challenges becomes possible thanks to the construction of systems based on open software, and the use of home computers to support the processing of huge amounts of data.\nThe new kind of business and scientific challenges include:\n\nintelligent advertising of thousands of products for millions of customers,\nprocessing of data about genes, RNA or proteins genus,\nintelligent detection of various methods of fraud among hundreds of billions of credit card transactions,\nstock market simulations based on thousands of financial instruments,\n… The data age presents us with newer and newer challenges related not only to the quantity but also to the time of data processing.\n\nAll machine learning algorithms require structured data written in a tabular form. They are organized in columns of characteristics that characterize each observation (rows). An example may be such features as sex, growth or the number of owned cars, of which it can be predicted whether the customer will repay the loan or not. This prediction is also collected as a feature. Thanks to the tables of features obtained in this way, we can use XGBoost or logistic regression algorithms to determine the appropriate combination of variables affecting the probability of a good or bad customer.\nUnstructured data is data that is not arranged in a tabular form. Examples include sound, images and text. In the process of processing, they are always converted into some vector form. However, individual letters, frequencies or pixels do not convey any information. They do not create separate features, which is crucial to distinguish them from structured data.\n\nGive an example of structured and unstructured data. Load sample data in jupyter notebook.\n\n\nKnows the types of structured and unstructured data (K2A_W02, K2A_W04, O2_W04, O2_W07)"
  },
  {
    "objectID": "lecture1.html#data-sources",
    "href": "lecture1.html#data-sources",
    "title": "Lecture 1 Small data",
    "section": "Data sources",
    "text": "Data sources\nThe three largest data generators are:\n\nsocial data in the form of texts (tweets, entries in social networks, comments), photos or videos. These data are very important due to their wide possibilities of consumer behaviour and sentiment analysis in marketing analyses.\ndata from all kinds of sensors or logs of the operation of devices and users (e.g. on a website). These data are related to IoT (Internet of Things) technology, which is currently one of the most developing areas in data processing, but also in the business direction.\nTransaction data, which is generally what is always generated as transactions appearing both online and offline. Currently, this type of data is processed for the purpose of performing transactions and rich analytics supporting virtually every area of ​​everyday life."
  },
  {
    "objectID": "lecture1.html#actual-data-generation-process",
    "href": "lecture1.html#actual-data-generation-process",
    "title": "Lecture 1 Small data",
    "section": "Actual data generation process",
    "text": "Actual data generation process\nThe data that is in reality appears as a result of the continuous operation of the systems. You have generated a lot of data on your phone today (and even on these devices!) Will it not generate them early or tomorrow? Batch processing splits the data into a time-length chunk and runs granular processes at a user-specified time . However, the timestamp is not always appropriate.\nWith many systems that handle the data streams that you already have. They are e.g.: - data warehouses - devices monitoring systems (IoT) - transaction systems - website analytics systems - Internet advertising - social media - operating systems - ….\n\na company is an organization that works and responds to a constant stream of data.\n\nThe input to the orchard source (but also the result of the evaluation) of the data is the file. It is written once and can be referred to (multiple functions - tasks can run on it). The name of the file to identify the record set.\nIn the case of the stream of change, it is only once through the so-called manufacturer (also referred to as the sender or supplier). They can be formed by many so-called consumers (recipients). Streaming events are grouped into so-called topic (eng. topic)."
  },
  {
    "objectID": "lecture1.html#not-to-big-data",
    "href": "lecture1.html#not-to-big-data",
    "title": "Lecture 1 Small data",
    "section": "not to Big Data",
    "text": "not to Big Data\n\n,,Big Data is like teenage sex: everyone talks about it, nobody really knows how to do it, everyone thinks everyone else is doing it, so every one claims they are doing it.’’ — Dan Ariely, Professor of Psychology and Behavioral Economics, Duke University\n\n\none, two, … four V\n\nVolume - the size of the data produced worldwide is growing exponentially. Huge amounts of data are being generated every second - the email you send, Twitter, Facebook, or other social media, videos, pictures, SMS messages, call records and data from varied devices and sensors.\nVelocity - the speed of data production, the speed of their transfer and processing.\nVariety - we associate traditional data with an alphanumeric form composed of letters and numbers. Currently, we have images, sounds, videos and IoT data streams at our disposal\nVeracity - Is the data complete and correct? Do they objectively reflect reality? Are they the basis for making decisions?\nValue - The value that the data holds. In the end, it’s all about cost and benefits.\n\n\nThe purpose of calculations is not numbers, but understanding them R.W. Hamming 1962.\n\nAs You can see data and data processing have been omnipresent in businesses for many decades. Over the years the collection and usage of data have grown consistently, and companies have designed and built infrastructures to manage that data."
  },
  {
    "objectID": "lecture1.html#data-processing-models",
    "href": "lecture1.html#data-processing-models",
    "title": "Lecture 1 Small data",
    "section": "Data processing models",
    "text": "Data processing models\nThe traditional architecture that most businesses implement distinguishes two types of data processing.\nMost of the data is stored in databases or data warehouses. By default, access to data comes down to the implementation of queries via applications. The method of using and implementing the database access process is called the processing model. Two implementations are most commonly used:\n\nTraditional Model\nTraditional model - on-line transaction processing, OLTP (on-line transaction processing). It works great in the case of ongoing service, e.g. customer service, order register, sales service, etc. Companies use all kinds of applications for their day-to-day business activities, such as Enterprise Resource Planning (ERP) Systems, Customer Relationship Management (CRM) software, and web-based applications. These systems are typically designed with separate tiers for data processing and data storage (transactional database system).\n\n  Applications are usually connected to external services or face human users and continuously process incoming events such as orders, emails, or clicks on a website.\nWhen an event is processed, an application reads its state or updates it by running transactions against the remote database system. Often, a database system serves multiple applications that sometimes access the same databases or tables.\nThis model provides effective solutions for:\n\neffective and safe data storage,\ntransactional data recovery after a failure,\ndata access optimization,\nconcurrency management,\nevent processing -> read -> write\n\nAnd what if we are dealing with:\n\naggregation of data from many systems (e.g. for many stores),\nsupporting data analysis,\ndata reporting and summaries,\noptimization of complex queries,\nsupporting business decisions.\n\nResearch on such issues has led to the formulation of a new data processing model and a new type of database (Data warehouse).\nThis application design can cause problems when applications need to evolve or scale. Since multiple applications might work on the same data representation or share the same infrastructure, changing the schema of a table or scaling a database system requires careful planning and a lot of effort. Currently, many running applications (even in one area) are implemented as microservices, i.e. small and independent applications (LINUX programming philosophy - do little but right). Because microservices are strictly decoupled from each other and only communicate over well-defined interfaces, each microservice can be implemented with a different technology stack including a programming language, libraries and data stores.\nThis model provides effective solutions for:\n\neffective and safe data storage,\ntransactional data recovery after a failure,\ndata access optimization,\nconcurrency management,\nevent processing -> read -> write\n\nAnd what if we are dealing with:\n\naggregation of data from many systems (e.g. for many stores),\nsupporting data analysis,\ndata reporting and summaries,\noptimization of complex queries,\nsupporting business decisions.\n\nResearch on such issues has led to the formulation of a new data processing model and a new type of database (Data warehouse).\nThis application design can cause problems when applications need to evolve or scale. Since multiple applications might work on the same data representation or share the same infrastructure, changing the schema of a table or scaling a database system requires careful planning and a lot of effort. Currently, many running applications (even in one area) are implemented as microservices, i.e. small and independent applications (LINUX programming philosophy - do little but right). Because microservices are strictly decoupled from each other and only communicate over well-defined interfaces, each microservice can be implemented with a different technology stack including a programming language, libraries and data stores.\nBoth are performed in batch mode. Today they are strictly made using Hadoop technology."
  },
  {
    "objectID": "lecture3.html",
    "href": "lecture3.html",
    "title": "Lecture 3 - Microservices architecture",
    "section": "",
    "text": "In the case of batch processing, we process historical data and the start time of the processing process has nothing to do with the time of occurrence of the analyzed events.\nFor streaming data, we have two time concepts:\n\nevent time - time in which the event happened.\nprocessing time - time during which the system processes the event.\n\nIn an ideal situation:  \nIn fact, data processing always takes place with a certain delay, which is represented by the points appearing below the function for the ideal situation (below the diagonal).\n \nIn stream processing applications, the differences between the time of the occurrence of an event and its processing prove to be important. The most common causes of delay are data transmission over the network or lack of communication between the device and the network. A simple example is driving a car through a tunnel and tracking the position via a GPS application.\nOf course, you can count the number of such missed events and trigger an alarm if there are too many such rejects.\nThe second (probably more often) used method is the use of the so-called correction watermarking.\nThe real-time event processing process can be represented as a step function, represented in the figure: \nAs can be seen, not all events contribute to the analysis and processing. The implementation of the processing process along with additional time for the occurrence of events (watermarking) can be presented as a process covering all events above the dashed line. The extra time allowed for additional events to be processed, but there may still be points that will not be taken into account. \nThe situations presented in the graphs clearly indicate why the concept of time is an important factor and requires precise definition already at the level of defining business needs. Timestamping data (events) is a difficult task."
  },
  {
    "objectID": "lecture3.html#time-windows",
    "href": "lecture3.html#time-windows",
    "title": "Lecture 3 - Microservices architecture",
    "section": "time-windows",
    "text": "time-windows\nTumbling window is a fixed-length window. Its characteristic feature is that each event belongs to only one window.  \nSliding window includes all events occurring in a certain length among themselves.  \ndisjoint window has a fixed length, but allows one window to overlap another. Typically used to smooth data."
  },
  {
    "objectID": "lecture2.html",
    "href": "lecture2.html",
    "title": "Lecture 2 - Time to Stream",
    "section": "",
    "text": "Expectations vs Reality\n\n\nWhen to take a business decision?\n\n\n\n\n\nBatch = Big, historical datasets\nStream = stream data, online, generated and send continuously\n\n\n\n\n\nBatch = minutes, hours, days (Data warehouses)\nStream = Real-time/near-real-time\n\n\n\n\n\nBatch = possible and used very often\nStream = ,,impossible’’\n\n\n\n\n\nExtract, Transform, Load is a basic pattern for data processing, commonly known in data warehousing. It’s all about extracting data from a source, transforming the data (business rules) and at the end writing/loading everything to a target (Hadoop, Relational Database, Data Warehouse etc.)"
  },
  {
    "objectID": "lecture2.html#big-data",
    "href": "lecture2.html#big-data",
    "title": "Lecture 2 - Time to Stream",
    "section": "Big Data",
    "text": "Big Data\nBig Data system can be a part of (source of) data warehouses (ex. Data Lake, Enterprise Data Hub)\nBut Data Warehouses are not Big Data Systems!\n\nData warehouses\n\n\nhighly structured data retention\nfocused on the analysis and reporting process\n100 % accuracy\n\n\nBig Data\n\n\ndata of any structure\nserves a variety of data-driven purposes (analytics, data science …)\nless than 100 % accuracy\n\n\n\nELT process\nELT process is similar to ETL and has the same stages involved, but the order of performing ETL stages is different. Extract data from one or many sources and Load it to the destination system for example “data lake”. After that, You can Transform Your data a more dynamically on demand.\nUse Case: - Demanding scalability requirements of Big Data - Streaming analytics - Integration of highly distributed data sources - Multiple data products from the same sources\nELT is an emerging trend: - Big Data -> Cloud computing - ELT separates the data pipeline from processing - More flexibility - No information loss (by transformations)\nDifference between ETL and ELT\n\nTransformations for ETL happen within the data pipeline\nTransformations for ELT happen in the destination environment\nETL is rigid - pipelines are engineered to user specifications\nELT is flexible - end users build their transformations\nOrganizations use ETL for relational data, on-premise - scalability is difficult\nELT solves scalability problems, handling both structured and unstructured Big Data in the cloud\nETL workflows take time to specify and develop\nELT supports self-serve, interactive analytics in real time\n\nELT is the evolution of ETL! - increasing demand for access to raw data.\nETL still has its place for many applications: - Lengthy time-to-insight - Challenges imposed by Big Data - Demand for access to siloed information\n\n\nData Extraction Techniques\nExamples of raw data sources: - Paper documents - Web pages - Analog audio/video - Survey, statistics, economics - Transactional data - Social media - Weather station networks - IoT - Medical records - Human genomes\nData extraction techniques include: - OCR - ADC sampling, CCD sampling - Mail, phone, or in-person surveys and polls - Cookies, user logs - Web scraping - API’s - Database querying - Edge computing - Biomedical devices\n\n\nData Transformation Techniques\ncan involve various operations, such as: - Data typing - Data structuring - Anonymizing, encrypting - Cleaning: duplicate records, missing values - Normalizing: converting data to common units - Filtering, sorting, aggregating, binning - Joining data sources\n\nSchema-on-write\nis the conventional ETL approach: - Consistency and efficiency - Limited versatility\n\n\nSchema-on-read\napplies to the modern ELT approach: - Versatility - Enhanced storage flexibility = more data\nTransformed data could be loss information. - data compression - filtering - aggregation - Edge computing devices\n\n\n\nData Load Techniques\n\nFull\nIncremental\nScheduled\nON-demand\nBatch and stream\npush and pull\nparallel and serial"
  },
  {
    "objectID": "lecture2.html#hadoop-map-reduce",
    "href": "lecture2.html#hadoop-map-reduce",
    "title": "Lecture 2 - Time to Stream",
    "section": "Hadoop Map-Reduce",
    "text": "Hadoop Map-Reduce\n\n\nFind a simple map-reduce algorithm in any programming language and run it.\n\n\nHow to improve?\n\nAPACHE SPARK"
  }
]